{"version":3,"sources":["../../../samples/tiles_collisions/link.js"],"names":[],"mappings":"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","file":"link.js","sourcesContent":["\"use strict\";\r\n\r\nimport {DIRECTIONS} from \"jsglib/rpg/rpg_core\";\r\nimport RpgPlayer from \"jsglib/rpg/rpg_player\";\r\nimport Inputs from \"jsglib/core/inputs\";\r\nimport Layer from \"jsglib/core/layer\";\r\nimport Sprite from \"jsglib/core/sprite\";\r\n\r\n// Sprite class defining tiles and animations for Link\r\nexport class LinkSprite extends Sprite {\r\n    static init(timer) {\r\n        this\r\n            .makeTiles(32, 32, 2)\r\n            .defineTilesAnimations([\r\n                {\r\n                    name: 'walk_down',\r\n                    tiles: [1, 2],\r\n                    time: 150\r\n                },\r\n                {\r\n                    name: 'walk_left',\r\n                    tiles: [3, 4],\r\n                    time: 150\r\n                },\r\n                {\r\n                    name: 'walk_up',\r\n                    tiles: [5, 6],\r\n                    time: 150\r\n                },\r\n                {\r\n                    name: 'walk_right',\r\n                    tiles: [7, 8],\r\n                    time: 150\r\n                },\r\n                {\r\n                    name: 'push_down',\r\n                    tiles: [9, 10],\r\n                    time: 150\r\n                },\r\n                {\r\n                    name: 'push_left',\r\n                    tiles: [11, 12],\r\n                    time: 150\r\n                },\r\n                {\r\n                    name: 'push_up',\r\n                    tiles: [13, 14],\r\n                    time: 150\r\n                },\r\n                {\r\n                    name: 'push_right',\r\n                    tiles: [15, 16],\r\n                    time: 150\r\n                }\r\n            ], timer);\r\n    }\r\n}\r\n\r\nexport class Link extends RpgPlayer {\r\n    constructor(x, y, game) {\r\n        // We must call the parent's constructor\r\n        super(x, y, game.inputs);\r\n\r\n        // Tell which Sprite class to use for displaying\r\n        this.setSpriteClass(LinkSprite);\r\n\r\n        // RpgPlayer uses Trait_KeysMapping: we can bind keys to some actions\r\n        // Here, we allow moving with arrows or ZQSD\r\n        this.initKeysMap({\r\n            [RpgPlayer.ACTIONS.MOVE_LEFT]: [Inputs.KEYS.ARROWS.LEFT, Inputs.KEYS.Q],\r\n            [RpgPlayer.ACTIONS.MOVE_RIGHT]: [Inputs.KEYS.ARROWS.RIGHT, Inputs.KEYS.D],\r\n            [RpgPlayer.ACTIONS.MOVE_UP]: [Inputs.KEYS.ARROWS.UP, Inputs.KEYS.Z],\r\n            [RpgPlayer.ACTIONS.MOVE_DOWN]: [Inputs.KEYS.ARROWS.DOWN, Inputs.KEYS.S]\r\n        });\r\n\r\n        // == Events definitions ==\r\n        this.on('rpg.solid_collision', e => {\r\n                // We want to handle collision only on first collided solid found\r\n                e.stopPropagation();\r\n\r\n                // Use a \"push\" animation on solid collision\r\n                switch (e.detail.direction) {\r\n                    case DIRECTIONS.UP:\r\n                        this.useAnimation('push_up');\r\n                        break;\r\n\r\n                    case DIRECTIONS.DOWN:\r\n                        this.useAnimation('push_down');\r\n                        break;\r\n\r\n                    case DIRECTIONS.LEFT:\r\n                        this.useAnimation('push_left');\r\n                        break;\r\n\r\n                    case DIRECTIONS.RIGHT:\r\n                        this.useAnimation('push_right');\r\n                        break;\r\n                }\r\n            })\r\n            .on('no_solids_collision', () => {\r\n                // When Link has no collisions with solids, if it's pushing,\r\n                // change its \"push\" animation to the corresponding \"walk\" one\r\n                switch (this.getAnimationName()) {\r\n                    case 'push_left':\r\n                        this.useAnimation('walk_left');\r\n                        break;\r\n                    case 'push_up':\r\n                        this.useAnimation('walk_up');\r\n                        break;\r\n                    case 'push_right':\r\n                        this.useAnimation('walk_right');\r\n                        break;\r\n                    case 'push_down':\r\n                        this.useAnimation('walk_down');\r\n                        break;\r\n                }\r\n            })\r\n            .on('rpg.moving_key_up', e => {\r\n                if (e.detail.pressed_moving_key) {\r\n                    this.switchAnimationByKey(e.detail.pressed_moving_key);\r\n                    return;\r\n                }\r\n\r\n                // No moving keys are pressed: we stop the animation\r\n                this.switchAnimationByKey(e.detail.key);\r\n                this.setCurrentTileNumber(this.current_animation.tiles_numbers[0]);\r\n                this.current_animation.stop();\r\n            });\r\n\r\n        game.inputs.on('keydown', e => {\r\n            // Do nothing if released key is not a moving one\r\n            if (!this.isMovingKey(e.detail.key)) {\r\n                return;\r\n            }\r\n\r\n            // Update player animation if he's not pushing walls\r\n            if (this.getAnimationName().indexOf('push') === -1) {\r\n                this.switchAnimationByKey(e.detail.key);\r\n            }\r\n        });\r\n\r\n        // Add player to layer in order to display it\r\n        Layer.MAIN_LAYER.addElement(this);\r\n    }\r\n\r\n    // Custom method for this class: it updates Link's animation according to pressed moving key\r\n    switchAnimationByKey(key) {\r\n        if (this.isKeyBindedToAction(key, RpgPlayer.ACTIONS.MOVE_LEFT)) {\r\n            this.useAnimation('walk_left');\r\n        } else if (this.isKeyBindedToAction(key, RpgPlayer.ACTIONS.MOVE_UP)) {\r\n            this.useAnimation('walk_up');\r\n        } else if (this.isKeyBindedToAction(key, RpgPlayer.ACTIONS.MOVE_RIGHT)) {\r\n            this.useAnimation('walk_right');\r\n        } else if (this.isKeyBindedToAction(key, RpgPlayer.ACTIONS.MOVE_DOWN)) {\r\n            this.useAnimation('walk_down');\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nLink.SPEED = 80;"]}
{"version":3,"sources":["../../jsglib/room.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAKqB,IAAI;kBAAJ,IAAI;;iBAAJ,IAAI;;;;kCAAJ,IAAI;;+EAAJ,IAAI;;;;;;;;qBAAJ,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAAJ,IAAI;;;sBAAJ,IAAI","file":"room.js","sourcesContent":["\"use strict\";\r\n\r\nimport EventsHandler from \"jsglib/events_handler\";\r\nimport $http from \"jsglib/http\";\r\n\r\nexport default class Room extends EventsHandler {\r\n    constructor(width = 0, height = 0) {\r\n        super();\r\n        this.width = width;\r\n        this.height = height;\r\n        this.definition = null;\r\n    }\r\n\r\n    initRoom(game) {\r\n        if (!this.definition) {\r\n            return this;\r\n        }\r\n\r\n        if (this.definition.layers) {\r\n            this.width = 0;\r\n            this.height = 0;\r\n\r\n            for (let layer_name in this.definition.layers) {\r\n                let definition = this.definition.layers[layer_name];\r\n                let layer = game.getLayerFromName(layer_name);\r\n                layer.tiles_sprite = null;\r\n                layer.tiles = [];\r\n\r\n                if (definition.tiles) {\r\n                    let SpriteClass = game.getClass(definition.sprite_class);\r\n                    layer.tiles_sprite = new SpriteClass();\r\n\r\n                    definition.tiles.forEach((row, row_index) => {\r\n                        layer.tiles[row_index] = layer.tiles[row_index] || [];\r\n\r\n                        row.forEach((tile_number, column_index) => {\r\n                            layer.tiles[row_index][column_index] = SpriteClass.getTile(tile_number);\r\n                        });\r\n                    });\r\n\r\n                    let tiles_size = layer.tiles_sprite.getTilesSize();\r\n                    this.width = Math.max(this.width, layer.tiles[0].length * tiles_size.width);\r\n                    this.height = Math.max(this.height, layer.tiles.length * tiles_size.height);\r\n                }\r\n            }\r\n        } else {\r\n            this.width = this.definition.width;\r\n            this.height = this.definition.height;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    useDefinition(data) {\r\n        let promise = (resolve) => {\r\n            if (typeof data === 'string') {\r\n                $http.get(data, {data_type: $http.DATA_TYPES.JSON}).then(data => {\r\n                    this.definition = data;\r\n                    resolve();\r\n                });\r\n            } else {\r\n                this.definition = data;\r\n                resolve();\r\n            }\r\n        };\r\n\r\n        return new Promise(promise);\r\n    }\r\n}"]}
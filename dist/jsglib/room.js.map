{"version":3,"sources":["../../jsglib/room.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAKqB,IAAI;YAAJ,IAAI;;WAAJ,IAAI;;;;yBAAJ,IAAI;;sEAAJ,IAAI;;;;;;;;eAAJ,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAAJ,IAAI;;;mBAAJ,IAAI","file":"room.js","sourcesContent":["\"use strict\";\r\n\r\nimport EventsHandler from \"jsglib/events_handler\";\r\nimport $http from \"jsglib/http\";\r\n\r\nexport default class Room extends EventsHandler {\r\n\tconstructor(width = 0, height = 0) {\r\n\t\tsuper();\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.definition = null;\r\n\t}\r\n\tinitRoom(game) {\r\n\t\tif ( ! this.definition) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tif (this.definition.layers) {\r\n\t\t\tthis.width = 0;\r\n\t\t\tthis.height = 0;\r\n\r\n\t\t\tfor (let layer_name in this.definition.layers) {\r\n\t\t\t\tlet definition = this.definition.layers[layer_name];\r\n\t\t\t\tlet layer = game.getLayerFromName(layer_name);\r\n\t\t\t\tlayer.tiles_sprite = null;\r\n\t\t\t\tlayer.tiles = [];\r\n\r\n\t\t\t\tif (definition.tiles) {\r\n\t\t\t\t\tlet SpriteClass = game.getClass(definition.sprite_class);\r\n\t\t\t\t\tlayer.tiles_sprite = new SpriteClass();\r\n\r\n\t\t\t\t\tdefinition.tiles.forEach((row, row_index) => {\r\n\t\t\t\t\t\tlayer.tiles[row_index] = layer.tiles[row_index] || [];\r\n\r\n\t\t\t\t\t\trow.forEach((tile_number, column_index) => {\r\n\t\t\t\t\t\t\tlayer.tiles[row_index][column_index] = SpriteClass.getTile(tile_number);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tlet tiles_size = layer.tiles_sprite.getTilesSize();\r\n\t\t\t\t\tthis.width = Math.max(this.width, layer.tiles[0].length * tiles_size.width);\r\n\t\t\t\t\tthis.height = Math.max(this.height, layer.tiles.length * tiles_size.height);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.width = this.definition.width;\r\n\t\t\tthis.height = this.definition.height;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\tuseDefinition(data) {\r\n\t\tlet promise = (resolve) => {\r\n\t\t\tif (typeof data === 'string') {\r\n\t\t\t\t$http.get(data, {data_type: $http.DATA_TYPES.JSON}).then(data => {\r\n\t\t\t\t\tthis.definition = data;\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.definition = data;\r\n\t\t\t\tresolve();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn new Promise(promise);\r\n\t}\r\n}"]}
{"version":3,"sources":["../../jsglib/inputs.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBA6He,MAAM","file":"inputs.js","sourcesContent":["\"use strict\";\r\n\r\nimport EventsHandler from 'jsglib/events_handler';\r\nimport Point from 'jsglib/point';\r\n\r\nclass Inputs extends EventsHandler {\r\n    constructor(dom_element) {\r\n        super();\r\n\r\n        this.mouse = new Point();\r\n        this.keys_pressed = [];\r\n\r\n        dom_element.addEventListener('mousemove', (e) => {\r\n            let x = e.pageX;\r\n            let y = e.pageY;\r\n\r\n            x -= (dom_element.getBoundingClientRect().left + (window.pageXOffset || dom_element.scrollLeft) + (dom_element.clientLeft || 0));\r\n            y -= (dom_element.getBoundingClientRect().top + (window.pageYOffset || dom_element.scrollTop) + (dom_element.clientTop || 0));\r\n\r\n            this.mouse.x = Math.floor(x);\r\n            this.mouse.y = Math.floor(y);\r\n\r\n            this.trigger('mousemove', {\r\n                mouse: this.mouse\r\n            })\r\n        });\r\n\r\n        dom_element.addEventListener('click', () => {\r\n            this.trigger('click', {\r\n                mouse: this.mouse\r\n            });\r\n        });\r\n\r\n        document.body.addEventListener('keydown', (e) => {\r\n            let key = e.which || e.keyCode;\r\n\r\n            if (this.isKeyPressed(key)) {\r\n                return;\r\n            }\r\n\r\n            // We don't handle more than 2 pressed keys on same time\r\n            if (this.keys_pressed.length >= 2) {\r\n                return;\r\n            }\r\n\r\n            this.keys_pressed.push(key);\r\n\r\n            let custom_event = this.trigger('keydown', {\r\n                key: key,\r\n                is_arrow: key >= Inputs.KEYS.ARROWS.LEFT && key <= Inputs.KEYS.ARROWS.DOWN\r\n            });\r\n\r\n            if (custom_event.defaultPrevented) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n\r\n        document.body.addEventListener('keyup', (e) => {\r\n            let key = e.which || e.keyCode;\r\n            this.keys_pressed.some((current_key, key_index) => {\r\n                if (key === current_key) {\r\n                    this.keys_pressed.splice(key_index, 1);\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            let custom_event = this.trigger('keyup', {\r\n                key: key,\r\n                is_arrow: key >= Inputs.KEYS.ARROWS.LEFT && key <= Inputs.KEYS.ARROWS.DOWN\r\n            });\r\n\r\n            if (custom_event.defaultPrevented) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    isKeyPressed(key) {\r\n        return this.keys_pressed.indexOf(key) >= 0;\r\n    }\r\n}\r\n\r\nInputs.KEYS = {\r\n    ARROWS: {\r\n        LEFT: 37,\r\n        UP: 38,\r\n        RIGHT: 39,\r\n        DOWN: 40\r\n    },\r\n    TAB: 9,\r\n    ENTER: 13,\r\n    SHIFT: 16,\r\n    CTRL: 17,\r\n    CONTROL: 17,\r\n    ALT: 18,\r\n    CAPS_LOCK: 20,\r\n    SPACE: 32,\r\n    A: 65,\r\n    B: 66,\r\n    C: 67,\r\n    D: 68,\r\n    E: 69,\r\n    F: 70,\r\n    G: 71,\r\n    H: 72,\r\n    I: 73,\r\n    J: 74,\r\n    K: 75,\r\n    L: 76,\r\n    M: 77,\r\n    N: 78,\r\n    O: 79,\r\n    P: 80,\r\n    Q: 81,\r\n    R: 82,\r\n    S: 83,\r\n    T: 84,\r\n    U: 85,\r\n    V: 86,\r\n    W: 87,\r\n    X: 88,\r\n    Y: 89,\r\n    Z: 90\r\n};\r\n\r\nexport default Inputs;"]}
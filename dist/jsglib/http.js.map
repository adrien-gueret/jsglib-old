{"version":3,"sources":["../../jsglib/http.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBA2Fe,KAAK","file":"http.js","sourcesContent":["\"use strict\";\r\n\r\nconst METHOD_GET = 'GET';\r\nconst METHOD_POST = 'POST';\r\nconst METHOD_PUT = 'PUT';\r\nconst METHOD_DELETE = 'DELETE';\r\nconst DATA_TYPE_TEXT = 'TEXT';\r\nconst DATA_TYPE_JSON = 'JSON';\r\nconst DATA_TYPE_XML = 'XML';\r\n\r\nfunction getParamsStringFromData(data) {\r\n    var params = [];\r\n\r\n    for (let param in data) {\r\n        if (data.hasOwnProperty(param)) {\r\n            params.push(encodeURIComponent(param) + '=' + encodeURIComponent(data[param]));\r\n        }\r\n    }\r\n\r\n    return params.join('&');\r\n}\r\n\r\nfunction getReadyStateChangeHandler(xhr, data_type, resolve, reject) {\r\n    return () => {\r\n        if (xhr.readyState === 4) {\r\n            if (xhr.status === 200 || xhr.status === 304) {\r\n                let response;\r\n\r\n                switch (data_type) {\r\n                    case DATA_TYPE_JSON:\r\n                        response = JSON.parse(xhr.responseText);\r\n                        break;\r\n\r\n                    case DATA_TYPE_XML:\r\n                        response = xhr.responseXML;\r\n                        break;\r\n\r\n                    default:\r\n                        response = xhr.responseText;\r\n                        break;\r\n                }\r\n\r\n                resolve(response);\r\n            }\r\n            else {\r\n                reject(xhr);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nfunction performRequest(method, url, data = undefined, async = true, data_type = DATA_TYPE_TEXT) {\r\n    let promise = (resolve, reject) => {\r\n        let xhr = new XMLHttpRequest();\r\n        let params_string = null;\r\n\r\n        if (data) {\r\n            params_string = getParamsStringFromData(data);\r\n        }\r\n\r\n        if (params_string && method === METHOD_GET) {\r\n            url += url.indexOf('?') === -1 ? '?' : '&';\r\n            url += params_string;\r\n        }\r\n\r\n        xhr.onreadystatechange = getReadyStateChangeHandler(xhr, data_type, resolve, reject);\r\n        xhr.open(method, url, async);\r\n        xhr.send(method === METHOD_POST ? params_string : null);\r\n    };\r\n\r\n    return new Promise(promise);\r\n}\r\n\r\nfunction getExposedMethod(request_method) {\r\n    return (url, {data = undefined, async = true, data_type = DATA_TYPE_TEXT} = {}) => {\r\n        return performRequest(request_method, url, data, async, data_type);\r\n    };\r\n}\r\n\r\nlet $http = {\r\n    DATA_TYPES: {\r\n        TEXT: DATA_TYPE_TEXT,\r\n        XML: DATA_TYPE_XML,\r\n        JSON: DATA_TYPE_JSON\r\n    },\r\n    get: getExposedMethod(METHOD_GET),\r\n    post: getExposedMethod(METHOD_POST),\r\n    delete: getExposedMethod(METHOD_DELETE),\r\n    put: getExposedMethod(METHOD_PUT)\r\n};\r\n\r\nexport default $http;"]}
{"version":3,"sources":["../../jsglib/timer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAIqB,KAAK;kBAAL,KAAK;;iBAAL,KAAK;;;kCAAL,KAAK;;+EAAL,KAAK;;;;;;;;;;;;qBAAL,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAAL,KAAK;;;sBAAL,KAAK","file":"timer.js","sourcesContent":["\"use strict\";\r\n\r\nimport EventsHandler from \"jsglib/events_handler\";\r\n\r\nexport default class Timer extends EventsHandler {\r\n    constructor(fps = 30) {\r\n        super();\r\n\r\n        this.fps = fps;\r\n        this.clocks = {};\r\n\r\n        this.on('step', () => {\r\n            this.checkCounters();\r\n        });\r\n    }\r\n\r\n    checkCounters() {\r\n        for (let generated_event_name in this.clocks) {\r\n            let clock = this.clocks[generated_event_name];\r\n            if (++clock.counter >= clock.target) {\r\n                this.trigger(generated_event_name);\r\n                this.clearTimeout(generated_event_name);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    setTimeout(callback, time) {\r\n        let generated_event_name = (Date.now() * Math.random()).toString(16);\r\n        this.clocks[generated_event_name] = {\r\n            counter: 0,\r\n            target: (time / 1000) * this.fps\r\n        };\r\n        this.on(generated_event_name, callback);\r\n        return generated_event_name;\r\n    }\r\n\r\n    clearTimeout(generated_event_name) {\r\n        delete this.clocks[generated_event_name];\r\n        return this.off(generated_event_name);\r\n    }\r\n}"]}